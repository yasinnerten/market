version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - market-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${BACKUP_DIR}:/app/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER}
    ports:
      - "${API_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - market-network
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_NAME: ${ADMIN_NAME}
      API_PORT: ${API_PORT}
      STORAGE_TYPE: ${STORAGE_TYPE}
      UPLOAD_DIR: ${UPLOAD_DIR}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_DIR: ${LOG_DIR}
      GO_ENV: ${GO_ENV}
    volumes:
      - ${UPLOAD_DIR}:/app/uploads
      - ${LOG_DIR}:/app/logs
      - ${BACKUP_DIR}:/app/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_STORAGE_URL=${VITE_STORAGE_URL}
    container_name: ${FRONTEND_CONTAINER}
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV}
    networks:
      - market-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  market-network:
    driver: bridge
